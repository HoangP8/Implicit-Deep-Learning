import argparse
import os
import sys
import datetime
from .data import load_data
from .model import GPTLanguageModel
from .utils import train_model, set_seed, generate_text

sys.path.append('../implicit')
from implicit.idl.attention.ImplicitAttention import ImplicitAttention


def parse_args():
    parser = argparse.ArgumentParser(description="Train, evaluate and generate text with GPT implicit models.")
    
    # device id and seed
    parser.add_argument("--device", type=int, default=0, help="Specify the device id (e.g., 0 for cuda:0)")
    parser.add_argument("--seed", type=int, default=0, help="Random seed for reproducibility")
    
    # dataset and training configs
    parser.add_argument("--dataset", type=str, required=True, help="Dataset")
    parser.add_argument("--batch_size", type=int, default=64, help="Training batch size")
    parser.add_argument("--block_size", type=int, default=256, help="Size of data blocks")
    parser.add_argument("--max_iters", type=int, default=30000, help="Max training iterations")
    parser.add_argument("--eval_interval", type=int, default=500, help="Interval for evaluation")
    parser.add_argument("--learning_rate", type=float, default=1e-4, help="Learning rate for optimizer")
    parser.add_argument("--eval_iters", type=int, default=200, help="Number of iterations for evaluation")
    parser.add_argument("--n_embd", type=int, default=384, help="Embedding size")
    parser.add_argument("--n_head", type=int, default=2, help="Number of attention heads")
    parser.add_argument("--n_layer", type=int, default=2, help="Number of layers")
    parser.add_argument("--dropout", type=float, default=0.2, help="Dropout rate")
    
    # IDL configs
    parser.add_argument("--fixed_point_iter", type=int, default=2, help="Fixed point iteration count")
    parser.add_argument("--enforce_structure_IDL", action="store_true", help="Enforce structured IDL model")
    parser.add_argument("--init_from_explicit", action="store_true", help="Initialize IDL model from explicit GPT")
    parser.add_argument("--explicit_ckpt", type=str, help="Path to pre-trained explicit model checkpoint")
    parser.add_argument("--attention_version", type=str, default="softmax", help="Attention mechanism version")
    parser.add_argument("--max_new_tokens", type=int, default=100, help="Max new tokens for generation")
    parser.add_argument("--is_low_rank", action="store_true", help="Low-rank approach for implicit model")
    parser.add_argument("--rank", type=int, default=1, help="Rank k of the low-rank approach")
    
    return parser.parse_args()


def main():
    """
    Main function to initialize models, train, evaluate and generate text.
    """

    args = parse_args()
    set_seed(args.seed)
    device = f"cuda:{args.device}"
    
    # log file
    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    log_dir = os.path.join(base_dir, 'results', f"im_attention_{args.dataset}")
    os.makedirs(log_dir, exist_ok=True)
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = os.path.join(log_dir, f"{timestamp}.log")
    
    # Load data
    train_data, val_data, vocab_size, additional_data = load_data(args)
    data = {"train": train_data, "val": val_data}

    # Model config
    model_config = {
        'vocab_size': vocab_size,
        'n_embd': args.n_embd,
        'block_size': args.block_size,
        'n_layer': args.n_layer,
        'n_head': args.n_head,
        'dropout': args.dropout
}

    # Initialize models
    idl_model = ImplicitAttention(
        model_class=GPTLanguageModel, 
        model_config=model_config, 
        device=device,
        init_from_explicit=args.init_from_explicit,
        explicit_ckpt=args.explicit_ckpt,
        train_model=lambda model: train_model(
            args=args,
            model=model,
            data=data,
            device=device,
            model_type="Explicit", 
            log_file=log_file,  
            write_initial=False
        ),
        fixed_point_iter=args.fixed_point_iter,
        enforce_structure_IDL=args.enforce_structure_IDL,
        attention_version = args.attention_version,
        is_low_rank=args.is_low_rank,
        rank=args.rank
        )
    
    # train idl model
    train_model(args=args, model=idl_model, data=data, device=device, model_type="Implicit", log_file=log_file, write_initial=True)
    
    # text generated by IDL
    generated_text = generate_text(args, idl_model, additional_data, device)
    with open(log_file, 'a') as f:  
        f.write(f"Generated text with the trained IDL model: {generated_text}\n")
    print(f"Generated text with the trained IDL model: {generated_text}")
    
    
if __name__ == "__main__":
    main()